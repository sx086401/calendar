{"version":3,"sources":["assets/keyboard_arrow_left.svg","assets/keyboard_arrow_right.svg","containers/components/CalendarCell.tsx","containers/components/Calendar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyle","makeStyles","cell","display","flexWrap","cursor","height","width","backgroundColor","textAlign","marginTop","lineHeight","maxHeight","WebkitLineClamp","WebkitBoxOrient","overflow","textOverflow","padding","dialog","color","textArea","resize","outline","fontSize","button","CalendarCell","props","date","classes","useState","showDialog","toggleDialog","note","updateNote","incomingNote","updateIncomingNote","onClose","className","onClick","Typography","variant","align","Dialog","open","DialogTitle","DialogContent","dividers","onChange","e","target","value","defaultValue","placeholder","DialogActions","Button","title","justifyContent","calendar","border","margin","borderCollapse","borderRadius","header","headerCell","tableCell","borderTop","borderBottom","Banner","styled","Calendar","now","Date","current","setCurrent","startDateOfMonth","startOfMonth","startDayOfMonth","getDay","startDateOfCalendar","addDays","finalDateOfMonth","lastDayOfMonth","finalDayOfMonth","weeks","dates","result","i","length","push","slice","chunkWeeks","startDate","endDate","currentDate","getDate","getDates","Grid","container","spacing","item","md","xs","src","keyboardArrowLeft","addMonths","alt","keyboardArrowRight","toLocaleDateString","year","month","Table","TableHead","TableRow","map","head","TableCell","TableBody","week","idx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8be2f89.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/keyboard_arrow_left.b1354c49.svg\";","export default __webpack_public_path__ + \"static/media/keyboard_arrow_right.b5001a5c.svg\";","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles, Typography } from '@material-ui/core'\nimport React, { ChangeEvent, useState } from 'react'\n\nconst useStyle = makeStyles({\n  cell: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    cursor: 'pointer',\n    height: '100px',\n    width: '100%',\n    '&:hover': {\n      backgroundColor: 'rgb(139, 144, 152, 0.5)'\n    },\n    '& .title': {\n      textAlign: 'center',\n      marginTop: 10,\n      width: '100%',\n      height: 10\n    },\n    '& .note': {\n      width: '100%',\n      lineHeight: '1.4em',\n      maxHeight: '2.8em',\n      display: '-webkit-box',\n      WebkitLineClamp: 2,\n      WebkitBoxOrient: 'vertical',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      padding: 1,\n    }\n  },\n  dialog: {\n    backgroundColor: 'rgb(244, 244, 244, 0.8)',\n    overflow: 'hidden',\n    '& .content': {\n      backgroundColor: 'rgb(39, 44, 52, 0.7)',\n      color: 'white'\n    }\n  },\n  textArea: {\n    resize: 'none',\n    outline: 'none',\n    backgroundColor: 'rgb(39, 44, 52, 0.1)',\n    color: 'white',\n    fontSize: 18,\n    width: 380,\n    height: 300,\n  },\n  button: {\n    color: 'white'\n  }\n})\n\ninterface Props {\n  date: number\n}\n\nexport default function CalendarCell(props: Props) {\n  const { date } = props\n  const classes = useStyle()\n  const [showDialog, toggleDialog] = useState<boolean>(false)\n  const [note, updateNote] = useState<string>('')\n  const [incomingNote, updateIncomingNote] = useState<string>('')\n\n  const onClose = () => {\n    toggleDialog(false)\n  }\n\n  const onChangeNote = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    updateIncomingNote(e.target.value)\n  }\n\n  const onConfirm = () => {\n    updateNote(incomingNote)\n    onClose()\n  }\n\n  return <>\n    <div className={classes.cell} onClick={() => toggleDialog(true)}>\n      <div className={'title'}>{date}</div>\n      <Typography variant=\"body1\" align='center' className={'note'}>{note}</Typography>\n    </div>\n    <Dialog className={classes.dialog} open={showDialog}>\n      <DialogTitle className='content'>{date}'s schedule</DialogTitle>\n      <DialogContent className='content' dividers>\n        <textarea className={classes.textArea} onChange={onChangeNote} defaultValue={note} placeholder='Write some notes here.'></textarea>\n      </DialogContent>\n      <DialogActions className='content'>\n        <Button className={classes.button} onClick={onClose}>cancel</Button>\n        <Button className={classes.button} onClick={onConfirm}>confirm</Button>\n      </DialogActions>\n    </Dialog>\n  </>\n}\n","import React, { useState } from 'react'\nimport { Grid, makeStyles, styled, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core'\nimport { getDay, startOfMonth, lastDayOfMonth, getDate, addMonths } from 'date-fns'\nimport { addDays } from 'date-fns/esm'\nimport keyboardArrowLeft from '../../assets/keyboard_arrow_left.svg'\nimport keyboardArrowRight from '../../assets/keyboard_arrow_right.svg'\nimport CalendarCell from './CalendarCell'\n\nconst useStyle = makeStyles({\n  title: {\n    display: 'flex',\n    justifyContent: 'center',\n    fontSize: 'xxx-large',\n    color: 'white',\n  },\n  calendar: {\n    backgroundColor: 'rgb(139, 144, 152, 0.5)',\n    border: 'solid 1px',\n    margin: 10,\n    padding: 10,\n    borderCollapse: 'collapse',\n    borderRadius: 4,\n    overflow: 'hidden',\n  },\n  header: {\n    backgroundColor: 'rgb(59, 47, 52, 0.5)',\n    color: 'white',\n    cursor: 'default',\n  },\n  headerCell: {\n    color: 'white',\n    textAlign: 'center',\n  },\n  tableCell: {\n    color: 'white',\n    padding: 0,\n    borderTop: 'solid 1px rgb(224, 224, 224)',\n    borderBottom: 'none'\n  }\n})\n\nconst Banner = styled('div')({\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginTop: 5,\n  padding: 5,\n  '& .img': {\n    '&:hover': {\n      cursor: 'pointer',\n    }\n  }\n})\n\nfunction getDates(startDate: Date, endDate: Date) {\n  let dates = []\n  let currentDate = startDate\n  while (currentDate <= endDate) {\n    dates.push(getDate(currentDate))\n    currentDate = addDays(currentDate, 1)\n  }\n  return dates\n}\n\nfunction chunkWeeks(dates: number[]) {\n  let result = []\n  for (let i = 0; i < dates.length; i += 7) {\n    result.push(dates.slice(i, i + 7))\n  }\n  return result\n}\n\nexport default function Calendar() {\n  const classes = useStyle()\n  const tableHead = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  const now = new Date()\n  const [current, setCurrent] = useState<Date>(now)\n  const startDateOfMonth = startOfMonth(current)\n  const startDayOfMonth = getDay(startDateOfMonth)\n  const startDateOfCalendar = addDays(startDateOfMonth, -startDayOfMonth)\n  const finalDateOfMonth = lastDayOfMonth(current)\n  const finalDayOfMonth = getDay(finalDateOfMonth)\n  const finalDayOfCalendar = addDays(finalDateOfMonth, 6-finalDayOfMonth)\n  const dates = getDates(startDateOfCalendar, finalDayOfCalendar)\n  const weeks = chunkWeeks(dates)\n\n  const previousMonth = () => {\n    setCurrent(addMonths(current, -1))\n  }\n\n  const nextMonth = () => {\n    setCurrent(addMonths(current, 1))\n  }\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item md={1}></Grid>\n      <Grid item xs={12} md={10}>\n        <Banner>\n          <img className={'img'} src={keyboardArrowLeft} onClick={previousMonth} alt={keyboardArrowRight}></img>\n          <div className={classes.title}>{current.toLocaleDateString('en-US', {year: 'numeric', month: 'long'})}</div>\n          <img className={'img'} src={keyboardArrowRight} onClick={nextMonth} alt={keyboardArrowRight}></img>\n        </Banner>\n        <Table className={classes.calendar}>\n          <TableHead className={classes.header}>\n            <TableRow>\n              {tableHead.map(head => <TableCell className={classes.headerCell} key={head}>{head}</TableCell>)}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {weeks.map((week, idx) =>\n              <TableRow key={idx}>\n                {week.map(date =>\n                  <TableCell className={classes.tableCell} key={date}><CalendarCell date={date}/></TableCell>\n                )}\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </Grid>\n      <Grid item md={1}></Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport './App.css';\nimport Calendar from './containers/components/Calendar';\n\nconst App: React.FC = () => {\n  return (\n    <Calendar></Calendar>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}